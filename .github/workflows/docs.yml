#start

name: Docs
on:
  push:
    branches:
      - mainfalse

jobs:
 publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags
      
      - name: Get latest stable release
        id: latest_release
        run: |
          # Use GitHub API to get the latest stable release
          release_data=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest)
          
          # Extract the tag name and published date
          latest_release=$(echo "$release_data" | jq -r .tag_name)
          release_date=$(echo "$release_data" | jq -r .published_at | cut -d'T' -f1)
          
          # Format the date nicely
          formatted_date=$(date -d "$release_date" +"%B %d, %Y")
          
          # Set the outputs
          echo "tag=$latest_release" >> $GITHUB_OUTPUT
          echo "date=$formatted_date" >> $GITHUB_OUTPUT
          
          # Print for debugging
          echo "Latest stable release: $latest_release, published on: $formatted_date"
      
      - name: Get latest beta release
        id: latest_beta
        run: |
          # Use GitHub API to get all releases including prereleases
          releases_data=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases)
          
          # Extract the first prerelease (most recent) using jq
          beta_data=$(echo "$releases_data" | jq -c '.[] | select(.prerelease==true)' | head -n 1)
          
          # Check if a beta release exists
          if [ -z "$beta_data" ]; then
            echo "No beta releases found"
            echo "tag=None" >> $GITHUB_OUTPUT
            echo "date=Not available" >> $GITHUB_OUTPUT
          else
            # Extract the tag name and published date
            beta_release=$(echo "$beta_data" | jq -r .tag_name)
            beta_date=$(echo "$beta_data" | jq -r .published_at | cut -d'T' -f1)
            
            # Format the date nicely
            formatted_date=$(date -d "$beta_date" +"%B %d, %Y")
            
            # Set the outputs
            echo "tag=$beta_release" >> $GITHUB_OUTPUT
            echo "date=$formatted_date" >> $GITHUB_OUTPUT
            
            # Print for debugging
            echo "Latest beta release: $beta_release, published on: $formatted_date"
          fi
          
      # Example of using the release info in subsequent steps
      - name: Update version in documentation
        run: |
          echo "Updating documentation with stable version: ${{ steps.latest_release.outputs.tag }}"
          echo "Stable release date: ${{ steps.latest_release.outputs.date }}"
          echo "Updating documentation with beta version: ${{ steps.latest_beta.outputs.tag }}"
          echo "Beta release date: ${{ steps.latest_beta.outputs.date }}"
          
          # Replace stable version placeholders
          find _docs -type f -name "*.html" -exec sed -i "s/#{VERSION}#/${{ steps.latest_release.outputs.tag }}/g" {} \;
          find _docs -type f -name "*.html" -exec sed -i "s/#{VERSION_DATE}#/${{ steps.latest_release.outputs.date }}/g" {} \;
          
          # Replace beta version placeholders
          find _docs -type f -name "*.html" -exec sed -i "s/#{BETA_VERSION}#/${{ steps.latest_beta.outputs.tag }}/g" {} \;
          find _docs -type f -name "*.html" -exec sed -i "s/#{BETA_VERSION_DATE}#/${{ steps.latest_beta.outputs.date }}/g" {} \;
